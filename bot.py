import logging
import random
import sqlite3
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('recipes.db', check_same_thread=False)
c = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
c.execute('''CREATE TABLE IF NOT EXISTS recipes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    category TEXT,
    ingredients TEXT,
    instructions TEXT
)''')
c.execute('''CREATE TABLE IF NOT EXISTS feedback (
    recipe_id INTEGER,
    user_id INTEGER,
    comment TEXT,
    FOREIGN KEY(recipe_id) REFERENCES recipes(id)
)''')
conn.commit()

# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORIES = ["–ó–∞–≤—Ç—Ä–∞–∫–∏", "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞", "–°–∞–ª–∞—Ç—ã", "–°—É–ø—ã", "–î–µ—Å–µ—Ä—Ç—ã", "–ó–∞–∫—É—Å–∫–∏"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_recipes():
    c.execute('SELECT * FROM recipes')
    return c.fetchall()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_categories():
    return CATEGORIES

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
def format_recipe(recipe):
    title, ingredients, instructions = recipe[1], recipe[3], recipe[4]
    text = f"üçΩ **{title}**\n\n"
    text += "üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
    text += f"{ingredients}\n\n"
    text += "üßë‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n"
    text += f"{instructions}"
    return text

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.username
    categories = get_categories()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {username}! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:')

    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = [[InlineKeyboardButton(category, callback_data=f'category_{category}')] for category in categories]
    keyboard.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", callback_data='random_recipe')])
    keyboard.append([InlineKeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data='weekly_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def category_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    category = query.data.split('_')[1]

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    c.execute('SELECT * FROM recipes WHERE category = ?', (category,))
    recipes_in_category = c.fetchall()

    # –ö–Ω–æ–ø–∫–∏ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
    keyboard = [[InlineKeyboardButton(recipe[1], callback_data=f'recipe_{recipe[0]}')] for recipe in recipes_in_category]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_categories')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(f'–†–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
async def recipe_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    recipe_id = int(query.data.split('_')[1])

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ ID
    c.execute('SELECT * FROM recipes WHERE id = ?', (recipe_id,))
    recipe = c.fetchone()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
    recipe_text = format_recipe(recipe)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
    keyboard = [
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f'feedback_{recipe_id}')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='back_to_categories')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(recipe_text, reply_markup=reply_markup)

# –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
async def random_recipe(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    c.execute('SELECT * FROM recipes ORDER BY RANDOM() LIMIT 1')
    recipe = c.fetchone()

    recipe_text = format_recipe(recipe)
    keyboard = [
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f'feedback_{recipe[0]}')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_categories')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(f"üé≤ –í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –≤–∞—Å:\n\n{recipe_text}", reply_markup=reply_markup)

# –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é
async def weekly_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    c.execute('SELECT * FROM recipes ORDER BY RANDOM() LIMIT 7')
    weekly_recipes = c.fetchall()

    menu_text = "üìÖ **–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é**\n\n"
    for day, recipe in enumerate(weekly_recipes, 1):
        menu_text += f"–î–µ–Ω—å {day}: {recipe[1]}\n"

    await query.message.edit_text(menu_text)

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
async def feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    recipe_id = int(query.data.split('_')[1])

    await query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ {recipe_id}:")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    app = ApplicationBuilder().token('6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE').build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(category_button, pattern='^category_'))
    app.add_handler(CallbackQueryHandler(recipe_button, pattern='^recipe_'))
    app.add_handler(CallbackQueryHandler(random_recipe, pattern='^random_recipe$'))
    app.add_handler(CallbackQueryHandler(weekly_menu, pattern='^weekly_menu$'))
    app.add_handler(CallbackQueryHandler(feedback, pattern='^feedback_'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()
