import logging
import re
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler
import asyncio
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import io

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
RECIPE_URL = 'https://drive.google.com/uc?id=1xHKBF9dBVJBqeO-tT6CxCgAx34TG46em'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
recipes = []

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–°–∞–ª–∞—Ç—ã": "ü•ó",
    "–°—É–ø—ã": "üç≤",
    "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–¢–µ—Å—Ç–æ": "ü•û",
    "–•–ª–µ–±": "üçû",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": "üçΩ",
    "–ó–∞–∫—É—Å–∫–∏": "ü•™",
    "–ù–∞–ø–∏—Ç–∫–∏": "ü•§",
    "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ": "ü•¶",
    "–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ": "ü•ó",
    "–ó–∞–≤—Ç—Ä–∞–∫–∏": "üç≥",
    "–ü–∞—Å—Ç–∞": "üçù"
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    '–°–∞–ª–∞—Ç—ã': ['—Å–∞–ª–∞—Ç', '–∑–µ–ª—ë–Ω—ã–π', '–æ–≤–æ—â–Ω–æ–π', '–∫–∞–ø—É—Å—Ç–Ω—ã–π', '–≤–∏–Ω–µ–≥—Ä–µ—Ç', '–≥—Ä–µ—á–µ—Å–∫–∏–π', '—Ü–µ–∑–∞—Ä—å'],
    '–°—É–ø—ã': ['—Å—É–ø', '–±—É–ª—å–æ–Ω', '—â–∞–≤–µ–ª—å', '–∫—Ä–µ–º-—Å—É–ø', '—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫', '–æ–∫—Ä–æ—à–∫–∞', '–ø—é—Ä–µ', '–ø–µ–ª—å–º–µ–Ω–∏'],
    '–î–µ—Å–µ—Ä—Ç—ã': ['—Ç–æ—Ä—Ç', '–ø–∏—Ä–æ–≥', '–ø–µ—á–µ–Ω—å–µ', '–ø—É–¥–∏–Ω–≥', '–¥–µ—Å–µ—Ä—Ç', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '—Ç–≤–æ—Ä–æ–∂–Ω–æ–µ'],
    '–¢–µ—Å—Ç–æ': ['—Ç–µ—Å—Ç–æ', '–ø–∏—Ä–æ–≥', '–±–ª–∏–Ω—ã', '–±–ª–∏–Ω—á–∏–∫–∏', '–∫–µ–∫—Å', '–º–∞—Ñ—Ñ–∏–Ω', '–≤—ã–ø–µ—á–∫–∞', '–ø–∏—Ü—Ü–∞'],
    '–•–ª–µ–±': ['—Ö–ª–µ–±', '–±—É–ª–æ—á–∫–∞', '–∫—Ä—É–∞—Å—Å–∞–Ω', '–±–∞–≥–µ—Ç', '–ª–µ–±–µ–¥—É—à–∫–∞', '–ø–∏—Ç–∞', '—Ñ–æ–∫–∞—á—á–∞'],
    '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞': ['–º—è—Å–æ', '—Ä—ã–±–∞', '–ø–∞—Å—Ç–∞', '–≥—Ä–∏–ª—å', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '–∂–∞—Ä–∫–æ–µ'],
    '–ó–∞–∫—É—Å–∫–∏': ['–∑–∞–∫—É—Å–∫–∞', '–∫–∞–Ω–∞–ø–µ', '–∫—Ä–æ—Å—Ç–∏–Ω–∏', '—Ñ–∏–Ω–≥–µ—Ä-—Ñ—É–¥', '—Ä–∞–≥—É', '–∫–µ–±–∞–±'],
    '–ù–∞–ø–∏—Ç–∫–∏': ['–Ω–∞–ø–∏—Ç–æ–∫', '—Å–º—É–∑–∏', '–∫–æ–∫—Ç–µ–π–ª—å', '—á–∞–π', '–∫–æ—Ñ–µ', '—Å–æ–∫', '–º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å'],
    '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ': ['–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π', '–≤–µ–≥–∞–Ω—Å–∫–∏–π', '–æ–≤–æ—â–∏', '—Ç–æ—Ñ—É', '—Å–µ–π—Ç–∞–Ω'],
    '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ': ['–¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π', '–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π', '–æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π', '—Å–∞–ª–∞—Ç', '–æ–≤–æ—â–Ω–æ–π —Å—É–ø'],
    '–ó–∞–≤—Ç—Ä–∞–∫–∏': ['–∑–∞–≤—Ç—Ä–∞–∫', '—Å—ã—Ä–Ω–∏–∫–∏', '–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—è–∏—á–Ω–∏—Ü–∞', '–±–ª–∏–Ω—ã', '–æ–ª–∞–¥—å–∏', '–≥—Ä–µ–Ω–∫–∏', '–ø—É–¥–∏–Ω–≥', '–π–æ–≥—É—Ä—Ç', '—Å–º–µ—Å—å –∑–ª–∞–∫–æ–≤', '–º—é—Å–ª–∏'],
    '–ü–∞—Å—Ç–∞': ['—Å–ø–∞–≥–µ—Ç—Ç–∏', '–ª–∞–∑–∞–Ω—å—è', '—Å–ø–∏—Ä–∞–ª—å–∫–∏', '—Ñ–∞—Ä—Ñ–∞–ª–µ', '–∫–∞—Ä–±–æ–Ω–∞—Ä–∞', '—Ñ–∏—Ç—É—á–∏–Ω–∏', '–Ω—å–æ–∫–∏', '–ø—Ç–∏–º –ø—Ç–∏–º', '–æ—Ä–∑–æ', '—Ä–∏–∑–æ—Ç—Ç–æ', '—Ç–µ–ª—å—è—Ç–µ–ª–∏']
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
BUTTONS_PER_PAGE = 5

# –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
favorites = []

def load_recipes():
    try:
        response = requests.get(RECIPE_URL)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        return []
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
        return []

def get_categories():
    categories = set(recipe.get('category') for recipe in recipes)
    return sorted(categories)

def format_recipe(recipe):
    recipe_text = f"üçΩ **{recipe['title']}**\n\n"
    recipe_text += "üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
    for ingredient in recipe.get('ingredients', []):
        amount = ingredient.get('amount', '')
        recipe_text += f"üî∏ {ingredient['ingredient']:20} {amount}\n"
    recipe_text += "\nüßë‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n"
    for i, step in enumerate(recipe.get('instructions', []), start=1):
        recipe_text += f"{i}. {step}\n"
    return recipe_text

def categorize_recipe(recipe_title):
    """–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    for category, keywords in CATEGORIES.items():
        pattern = r'\b(?:' + '|'.join(re.escape(kw) for kw in keywords) + r')\b'
        if re.search(pattern, recipe_title, re.IGNORECASE):
            return category
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def start(update: Update, context: CallbackContext):
    global recipes
    recipes = load_recipes()
    if not recipes:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    categories = get_categories()
    keyboard = [[InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(category, 'üç¥')} {category}", callback_data=f'category_{category}_0')] for category in categories]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)

async def category_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_')
    category = data[1]
    page = int(data[2])

    recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

    if not recipes_in_category:
        await query.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    start_index = page * BUTTONS_PER_PAGE
    end_index = start_index + BUTTONS_PER_PAGE
    recipes_page = recipes_in_category[start_index:end_index]

    keyboard = [[InlineKeyboardButton(f"üçΩ {recipe['title']}", callback_data=f'recipe_{category}_{i + start_index}')] for i, recipe in enumerate(recipes_page)]
    if end_index < len(recipes_in_category):
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'category_{category}_{page + 1}')])

    if page > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'category_{category}_{page - 1}')])

    keyboard.append([InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=reply_markup)

async def recipe_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    try:
        data = query.data.split('_')
        category = data[1]
        recipe_index = int(data[2])
        recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

        if 0 <= recipe_index < len(recipes_in_category):
            recipe = recipes_in_category[recipe_index]
            recipe_text = format_recipe(recipe)

            buttons = [
                [InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{recipe_index}")],
                [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", callback_data=f"export_{recipe_index}")],
                [InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'category_{category}_0')]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.delete()
            await query.message.reply_text(recipe_text, parse_mode='Markdown', reply_markup=reply_markup)
        else:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def favorite_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    recipe_index = int(query.data.split('_')[1])
    if recipe_index in favorites:
        favorites.remove(recipe_index)
        await query.message.reply_text("–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
    else:
        favorites.append(recipe_index)
        await query.message.reply_text("–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")

async def show_favorites(update: Update, context: CallbackContext):
    if not favorites:
        await update.message.reply_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.")
        return

    fav_recipes = [recipes[i] for i in favorites]
    message = "‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã**\n\n" + "\n".join([f"{i+1}. {recipe['title']}" for i, recipe in enumerate(fav_recipes)])
    await update.message.reply_text(message)

async def export_to_pdf(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    recipe_index = int(query.data.split('_')[1])
    recipe = recipes[recipe_index]

    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.drawString(100, 750, recipe['title'])
    y = 700
    for ingredient in recipe['ingredients']:
        c.drawString(100, y, f"{ingredient['ingredient']}: {ingredient.get('amount', '')}")
        y -= 20

    y -= 20
    for i, step in enumerate(recipe['instructions'], start=1):
        c.drawString(100, y, f"{i}. {step}")
        y -= 20

    c.showPage()
    c.save()
    buffer.seek(0)
    await query.message.reply_document(document=buffer, filename=f"{recipe['title']}.pdf")

async def home(update: Update, context: CallbackContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ callback_query
    if update.callback_query:
        await start(update, context)

def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    app = ApplicationBuilder().token("6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("favorites", show_favorites))
    app.add_handler(CallbackQueryHandler(category_button, pattern=r'^category_'))
    app.add_handler(CallbackQueryHandler(recipe_button, pattern=r'^recipe_'))
    app.add_handler(CallbackQueryHandler(favorite_button, pattern=r'^favorite_'))
    app.add_handler(CallbackQueryHandler(export_to_pdf, pattern=r'^export_'))
    app.add_handler(CallbackQueryHandler(home, pattern='^home'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()
