import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
async def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as file:
            recipes = json.load(file)
            return recipes
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ recipes.json: {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
async def random_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    recipes = await load_recipes()
    recipe = random.choice(list(recipes.values()))
    await update.message.reply_text(
        f"üçΩÔ∏è **{recipe['name']}**\n\n{recipe['description']}\n\n**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n{recipe['ingredients']}\n\n**–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n{recipe['instructions']}",
        parse_mode='Markdown'
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def search_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    recipes = await load_recipes()
    query = update.message.text.lower()
    found_recipes = [r for r in recipes.values() if query in r['name'].lower()]
    
    if found_recipes:
        response = '\n\n'.join([f"üçΩÔ∏è **{r['name']}**\n{r['description']}" for r in found_recipes])
        await update.message.reply_text(response, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç üç≤", callback_data='random_recipe')],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ üîç", callback_data='search_recipe')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å ‚ùì", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CheffBot! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'random_recipe':
        await random_recipe(query.message, context)
    elif query.data == 'search_recipe':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ.")
    elif query.data == 'help':
        await query.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/help - –ü–æ–º–æ—â—å\n/random - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ."
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:
    app = Application.builder().token("YOUR_BOT_TOKEN").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", lambda update, context: update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")))
    app.add_handler(CommandHandler("random", random_recipe))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_recipe))
    app.add_handler(MessageHandler(filters.COMMAND, lambda update, context: update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")))

    await app.run_polling()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
