import logging
import re
import requests
import sqlite3
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler
import random

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
RECIPE_URL = 'https://drive.google.com/uc?id=1xHKBF9dBVJBqeO-tT6CxCgAx34TG46em'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
recipes = []

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–°–∞–ª–∞—Ç—ã": "ü•ó",
    "–°—É–ø—ã": "üç≤",
    "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–¢–µ—Å—Ç–æ": "ü•û",
    "–•–ª–µ–±": "üçû",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": "üçΩ",
    "–ó–∞–∫—É—Å–∫–∏": "ü•™",
    "–ù–∞–ø–∏—Ç–∫–∏": "ü•§",
    "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ": "ü•¶",
    "–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ": "ü•ó",
    "–ó–∞–≤—Ç—Ä–∞–∫–∏": "üç≥",
    "–ü–∞—Å—Ç–∞": "üçù"
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    '–°–∞–ª–∞—Ç—ã': ['—Å–∞–ª–∞—Ç', '–∑–µ–ª—ë–Ω—ã–π', '–æ–≤–æ—â–Ω–æ–π', '–∫–∞–ø—É—Å—Ç–Ω—ã–π', '–≤–∏–Ω–µ–≥—Ä–µ—Ç', '–≥—Ä–µ—á–µ—Å–∫–∏–π', '—Ü–µ–∑–∞—Ä—å'],
    '–°—É–ø—ã': ['—Å—É–ø', '–±—É–ª—å–æ–Ω', '—â–∞–≤–µ–ª—å', '–∫—Ä–µ–º-—Å—É–ø', '—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫', '–æ–∫—Ä–æ—à–∫–∞', '–ø—é—Ä–µ', '–ø–µ–ª—å–º–µ–Ω–∏'],
    '–î–µ—Å–µ—Ä—Ç—ã': ['—Ç–æ—Ä—Ç', '–ø–∏—Ä–æ–≥', '–ø–µ—á–µ–Ω—å–µ', '–ø—É–¥–∏–Ω–≥', '–¥–µ—Å–µ—Ä—Ç', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '—Ç–≤–æ—Ä–æ–∂–Ω–æ–µ'],
    '–¢–µ—Å—Ç–æ': ['—Ç–µ—Å—Ç–æ', '–ø–∏—Ä–æ–≥', '–±–ª–∏–Ω—ã', '–±–ª–∏–Ω—á–∏–∫–∏', '–∫–µ–∫—Å', '–º–∞—Ñ—Ñ–∏–Ω', '–≤—ã–ø–µ—á–∫–∞', '–ø–∏—Ü—Ü–∞'],
    '–•–ª–µ–±': ['—Ö–ª–µ–±', '–±—É–ª–æ—á–∫–∞', '–∫—Ä—É–∞—Å—Å–∞–Ω', '–±–∞–≥–µ—Ç', '–ª–µ–±–µ–¥—É—à–∫–∞', '–ø–∏—Ç–∞', '—Ñ–æ–∫–∞—á—á–∞'],
    '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞': ['–º—è—Å–æ', '—Ä—ã–±–∞', '–ø–∞—Å—Ç–∞', '–≥—Ä–∏–ª—å', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '–∂–∞—Ä–∫–æ–µ'],
    '–ó–∞–∫—É—Å–∫–∏': ['–∑–∞–∫—É—Å–∫–∞', '–∫–∞–Ω–∞–ø–µ', '–∫—Ä–æ—Å—Ç–∏–Ω–∏', '—Ñ–∏–Ω–≥–µ—Ä-—Ñ—É–¥', '—Ä–∞–≥—É', '–∫–µ–±–∞–±'],
    '–ù–∞–ø–∏—Ç–∫–∏': ['–Ω–∞–ø–∏—Ç–æ–∫', '—Å–º—É–∑–∏', '–∫–æ–∫—Ç–µ–π–ª—å', '—á–∞–π', '–∫–æ—Ñ–µ', '—Å–æ–∫', '–º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å'],
    '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ': ['–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π', '–≤–µ–≥–∞–Ω—Å–∫–∏–π', '–æ–≤–æ—â–∏', '—Ç–æ—Ñ—É', '—Å–µ–π—Ç–∞–Ω'],
    '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ': ['–¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π', '–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π', '–æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π', '—Å–∞–ª–∞—Ç', '–æ–≤–æ—â–Ω–æ–π —Å—É–ø'],
    '–ó–∞–≤—Ç—Ä–∞–∫–∏': ['–∑–∞–≤—Ç—Ä–∞–∫', '—Å—ã—Ä–Ω–∏–∫–∏', '–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—è–∏—á–Ω–∏—Ü–∞', '–±–ª–∏–Ω—ã', '–æ–ª–∞–¥—å–∏', '–≥—Ä–µ–Ω–∫–∏', '–ø—É–¥–∏–Ω–≥', '–π–æ–≥—É—Ä—Ç', '—Å–º–µ—Å—å –∑–ª–∞–∫–æ–≤', '–º—é—Å–ª–∏'],
    '–ü–∞—Å—Ç–∞': ['—Å–ø–∞–≥–µ—Ç—Ç–∏', '–ª–∞–∑–∞–Ω—å—è', '—Å–ø–∏—Ä–∞–ª—å–∫–∏', '—Ñ–∞—Ä—Ñ–∞–ª–µ', '–∫–∞—Ä–±–æ–Ω–∞—Ä–∞', '—Ñ–∏—Ç—É—á–∏–Ω–∏', '–Ω—å–æ–∫–∏', '–ø—Ç–∏–º –ø—Ç–∏–º', '–æ—Ä–∑–æ', '—Ä–∏–∑–æ—Ç—Ç–æ', '—Ç–µ–ª—å—è—Ç–µ–ª–∏']
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
BUTTONS_PER_PAGE = 5

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT
)''')
conn.commit()

def load_recipes():
    try:
        response = requests.get(RECIPE_URL)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        return []
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
        return []

def get_categories():
    categories = set(recipe.get('category') for recipe in recipes)
    return sorted(categories)

def format_recipe(recipe):
    recipe_text = f"üçΩ **{recipe['title']}**\n\n"
    recipe_text += "üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
    for ingredient in recipe.get('ingredients', []):
        amount = ingredient.get('amount', '')
        recipe_text += f"üî∏ {ingredient['ingredient']:20} {amount}\n"
    recipe_text += "\nüßë‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n"
    for i, step in enumerate(recipe.get('instructions', []), start=1):
        recipe_text += f"{i}. {step}\n"
    return recipe_text

def categorize_recipe(recipe_title):
    for category, keywords in CATEGORIES.items():
        pattern = r'\b(?:' + '|'.join(re.escape(kw) for kw in keywords) + r')\b'
        if re.search(pattern, recipe_title, re.IGNORECASE):
            return category
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def add_user(user_id, username):
    c.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()

def count_users():
    c.execute('SELECT COUNT(*) FROM users')
    return c.fetchone()[0]

def load_feedback():
    try:
        with open('data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_feedback(feedback):
    with open('data.json', 'w', encoding='utf-8') as f:
        json.dump(feedback, f, ensure_ascii=False, indent=4)

async def start(update: Update, context: CallbackContext):
    global recipes
    recipes = load_recipes()
    if not recipes:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = update.effective_user.id
    username = update.effective_user.username

    add_user(user_id, username)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user_count = count_users()    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç! –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å {user_count}-–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞!')

    categories = get_categories()
    keyboard = [[InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(category, 'üç¥')} {category}", callback_data=f'category_{category}_0')] for category in categories]
    keyboard.append([InlineKeyboardButton("üìÖ –°–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data='weekly_menu')])
    keyboard.append([InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')])  # –ö–Ω–æ–ø–∫–∞ "–î–æ–º–æ–π"
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)

async def category_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_')
    category = data[1]
    page = int(data[2])

    recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

    if not recipes_in_category:
        await query.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    start_index = page * BUTTONS_PER_PAGE
    end_index = start_index + BUTTONS_PER_PAGE
    recipes_page = recipes_in_category[start_index:end_index]

    keyboard = [[InlineKeyboardButton(recipe['title'], callback_data=f'recipe_{recipes.index(recipe)}')] for recipe in recipes_page]

    if start_index > 0:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'category_{category}_{page - 1}')])
    if end_index < len(recipes_in_category):
        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=f'category_{category}_{page + 1}')])
    
    keyboard.append([InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')])  # –ö–Ω–æ–ø–∫–∞ "–î–æ–º–æ–π"

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(f"–†–µ—Ü–µ–ø—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}", reply_markup=reply_markup)

async def recipe_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    recipe_index = int(query.data.split('_')[1])
    if recipe_index < 0 or recipe_index >= len(recipes):
        await query.message.reply_text("–û—à–∏–±–∫–∞: –ò–Ω–¥–µ–∫—Å —Ä–µ—Ü–µ–ø—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        return

    recipe = recipes[recipe_index]
    recipe_text = format_recipe(recipe)

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'category_{categorize_recipe(recipe["title"])}_0')],
        [InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(recipe_text, reply_markup=reply_markup)

async def main():
    global recipes
    recipes = load_recipes()
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(recipes)} —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
    
    app = ApplicationBuilder().token("6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(category_button, pattern=r'category_'))
    app.add_handler(CallbackQueryHandler(recipe_button, pattern=r'recipe_'))

    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
