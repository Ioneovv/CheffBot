import logging
import nest_asyncio
from telegram import Update, ForceReply
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import json
import httpx

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Load recipes from JSON
def load_recipes():
    with open('recipes.json', 'r', encoding='utf-8') as file:
        return json.load(file)

recipes = load_recipes()

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CheffBot!\n\n"
        "üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n"
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ."
    )
    await update.message.reply_html(welcome_text)

# Help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/search - –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."
    )
    await update.message.reply_text(help_text)

# Search recipe
async def search_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    found_recipes = [recipe for recipe in recipes if query.lower() in recipe['name'].lower()]
    
    if found_recipes:
        response_text = "üçΩÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n"
        for recipe in found_recipes:
            response_text += f"‚úÖ {recipe['name']} - {recipe['description']}\n"
        await update.message.reply_text(response_text)
    else:
        await update.message.reply_text("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

# Menu command
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu_text = "üìã –ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:\n"
    for recipe in recipes:
        menu_text += f"üìå {recipe['name']}\n"
    await update.message.reply_text(menu_text)

# Main function to run the bot
async def main():
    app = ApplicationBuilder().token('6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE').build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(MessageHandler(filters.text & ~filters.command, search_recipe))
    
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
