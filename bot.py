import logging
import json
import asyncio
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
async def load_recipes():
    url = "https://github.com/Ioneovv/CheffBot/blob/main/recipes_part1.json"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {response.status}")
                return []

recipes = asyncio.run(load_recipes())

# –≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–°–∞–ª–∞—Ç—ã": "ü•ó", "–°—É–ø—ã": "üç≤", "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": "üçΩ", "–ó–∞–∫—É—Å–∫–∏": "ü•™", "–ù–∞–ø–∏—Ç–∫–∏": "ü•§"
}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∏—Å—Ç–æ—Ä–∏—è
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_data[user_id] = {'favorites': [], 'history': []}

    categories = set(recipe.get('category') for recipe in recipes)
    keyboard = [[InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(cat, 'üç¥')} {cat}", callback_data=f'category_{cat}_0')] for cat in sorted(categories)]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (show_favorites, search_recipes, add_to_favorites –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = ApplicationBuilder().token("6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE").build()

    application.add_handler(CommandHandler("start", start))
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
    
    await application.start()
    await application.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == '__main__':
    asyncio.run(main())
