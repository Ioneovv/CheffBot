import asyncio
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext

# –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
RECIPE_URL = "https://drive.google.com/uc?export=download&id=1ZJRccW9YjpI0O8Q7eQ8PFCH5WC-6G-Yb"

def load_recipes():
    response = requests.get(RECIPE_URL)
    response.raise_for_status()
    return response.json()

recipes = load_recipes()

def search_recipes(query):
    results = []
    for recipe in recipes:
        title = recipe.get('title', '').lower()
        ingredients = [ing['ingredient'].lower() for ing in recipe.get('ingredients', [])]
        if query.lower() in title or any(query.lower() in ing for ing in ingredients):
            results.append(recipe)
    return results

async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data='search_by_title')],
        [InlineKeyboardButton("üç¥ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", callback_data='search_by_ingredients')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞:', reply_markup=reply_markup)

async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('recipe_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞
        recipe_index = int(query.data.split('_')[1])
        if recipe_index < len(recipes):
            recipe = recipes[recipe_index]
            recipe_text = f"**{recipe['title']}**\n\n"
            recipe_text += f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
            for ingredient in recipe.get('ingredients', []):
                quantity = ingredient.get('quantity', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                recipe_text += f"- {ingredient['ingredient']} ({quantity})\n"
            recipe_text += f"\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n"
            for i, step in enumerate(recipe.get('instructions', []), start=1):
                recipe_text += f"{i}. {step}\n"
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await query.message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç
            await query.message.reply_text(recipe_text, parse_mode='Markdown')

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
            keyboard = [
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data='search_by_title')],
                [InlineKeyboardButton("üç¥ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", callback_data='search_by_ingredients')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=reply_markup)

        else:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if query.data.startswith('more_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ"
        data = query.data.split('_')
        search_type = data[1]
        query_text = data[2]
        offset = int(data[3])
        
        results = search_recipes(query_text)[offset:offset+5]
        if not results:
            await query.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        keyboard = []
        for i, recipe in enumerate(results):
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ—Ü–µ–ø—Ç–∞
            title_with_emoji = f"üçΩ {recipe['title']}" if 'title' in recipe else "–†–µ—Ü–µ–ø—Ç"
            keyboard.append([InlineKeyboardButton(title_with_emoji, callback_data=f'recipe_{i+offset}')])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ï—â–µ"
        if len(results) == 5:
            keyboard.append([InlineKeyboardButton("üëâ –ï—â–µ", callback_data=f'more_{search_type}_{query_text}_{offset+5}')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=reply_markup)
    
    elif query.data in ['search_by_title', 'search_by_ingredients']:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        context.user_data['search_type'] = query.data

async def handle_message(update: Update, context: CallbackContext):
    query = update.message.text
    search_type = context.user_data.get('search_type')
    
    if search_type in ['search_by_title', 'search_by_ingredients']:
        results = search_recipes(query)[:5]
        if not results:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        keyboard = []
        for i, recipe in enumerate(results):
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ—Ü–µ–ø—Ç–∞
            title_with_emoji = f"üçΩ {recipe['title']}" if 'title' in recipe else "–†–µ—Ü–µ–ø—Ç"
            keyboard.append([InlineKeyboardButton(title_with_emoji, callback_data=f'recipe_{i}')])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ï—â–µ"
        if len(results) == 5:
            keyboard.append([InlineKeyboardButton("üëâ –ï—â–µ", callback_data=f'more_{search_type}_{query}_5')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=reply_markup)
    
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞.")

async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞
    application = Application.builder().token("6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE").build()
    print("Bot application created.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("Handlers added.")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    print("Bot initialized.")
    await application.start()
    print("Bot started.")
    await application.updater.start_polling()
    print("Bot is polling.")
    await asyncio.Event().wait()  # –û–∂–∏–¥–∞–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    print("Bot stopped.")

if __name__ == '__main__':
    asyncio.run(main())
