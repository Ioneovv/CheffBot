import logging
import json
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
RECIPE_FILE = 'https://drive.google.com/file/d/1xHKBF9dBVJBqeO-tT6CxCgAx34TG46em/view?usp=drive_link'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
recipes = []
favorites = []
usage_stats = {}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–°–∞–ª–∞—Ç—ã": "ü•ó",
    "–°—É–ø—ã": "üç≤",
    "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–¢–µ—Å—Ç–æ": "ü•û",
    "–•–ª–µ–±": "üçû",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": "üçΩ",
    "–ó–∞–∫—É—Å–∫–∏": "ü•™",
    "–ù–∞–ø–∏—Ç–∫–∏": "ü•§",
    "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ": "ü•¶",
    "–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ": "ü•ó",
    "–ó–∞–≤—Ç—Ä–∞–∫–∏": "üç≥",
    "–ü–∞—Å—Ç–∞": "üçù"
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    '–°–∞–ª–∞—Ç—ã': ['—Å–∞–ª–∞—Ç', '–∑–µ–ª—ë–Ω—ã–π', '–æ–≤–æ—â–Ω–æ–π', '–∫–∞–ø—É—Å—Ç–Ω—ã–π', '–≤–∏–Ω–µ–≥—Ä–µ—Ç', '–≥—Ä–µ—á–µ—Å–∫–∏–π', '—Ü–µ–∑–∞—Ä—å'],
    '–°—É–ø—ã': ['—Å—É–ø', '–±—É–ª—å–æ–Ω', '—â–∞–≤–µ–ª—å', '–∫—Ä–µ–º-—Å—É–ø', '—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫', '–æ–∫—Ä–æ—à–∫–∞', '–ø—é—Ä–µ', '–ø–µ–ª—å–º–µ–Ω–∏'],
    '–î–µ—Å–µ—Ä—Ç—ã': ['—Ç–æ—Ä—Ç', '–ø–∏—Ä–æ–≥', '–ø–µ—á–µ–Ω—å–µ', '–ø—É–¥–∏–Ω–≥', '–¥–µ—Å–µ—Ä—Ç', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '—Ç–≤–æ—Ä–æ–∂–Ω–æ–µ'],
    '–¢–µ—Å—Ç–æ': ['—Ç–µ—Å—Ç–æ', '–ø–∏—Ä–æ–≥', '–±–ª–∏–Ω—ã', '–±–ª–∏–Ω—á–∏–∫–∏', '–∫–µ–∫—Å', '–º–∞—Ñ—Ñ–∏–Ω', '–≤—ã–ø–µ—á–∫–∞', '–ø–∏—Ü—Ü–∞'],
    '–•–ª–µ–±': ['—Ö–ª–µ–±', '–±—É–ª–æ—á–∫–∞', '–∫—Ä—É–∞—Å—Å–∞–Ω', '–±–∞–≥–µ—Ç', '–ª–µ–±–µ–¥—É—à–∫–∞', '–ø–∏—Ç–∞', '—Ñ–æ–∫–∞—á—á–∞'],
    '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞': ['–º—è—Å–æ', '—Ä—ã–±–∞', '–ø–∞—Å—Ç–∞', '–≥—Ä–∏–ª—å', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '–∂–∞—Ä–∫–æ–µ'],
    '–ó–∞–∫—É—Å–∫–∏': ['–∑–∞–∫—É—Å–∫–∞', '–∫–∞–Ω–∞–ø–µ', '–∫—Ä–æ—Å—Ç–∏–Ω–∏', '—Ñ–∏–Ω–≥–µ—Ä-—Ñ—É–¥', '—Ä–∞–≥—É', '–∫–µ–±–∞–±'],
    '–ù–∞–ø–∏—Ç–∫–∏': ['–Ω–∞–ø–∏—Ç–æ–∫', '—Å–º—É–∑–∏', '–∫–æ–∫—Ç–µ–π–ª—å', '—á–∞–π', '–∫–æ—Ñ–µ', '—Å–æ–∫', '–º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å'],
    '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ': ['–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π', '–≤–µ–≥–∞–Ω—Å–∫–∏–π', '–æ–≤–æ—â–∏', '—Ç–æ—Ñ—É', '—Å–µ–π—Ç–∞–Ω'],
    '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ': ['–¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π', '–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π', '–æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π', '—Å–∞–ª–∞—Ç', '–æ–≤–æ—â–Ω–æ–π —Å—É–ø'],
    '–ó–∞–≤—Ç—Ä–∞–∫–∏': ['–∑–∞–≤—Ç—Ä–∞–∫', '—Å—ã—Ä–Ω–∏–∫–∏', '–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—è–∏—á–Ω–∏—Ü–∞', '–±–ª–∏–Ω—ã', '–æ–ª–∞–¥—å–∏', '–≥—Ä–µ–Ω–∫–∏', '–ø—É–¥–∏–Ω–≥', '–π–æ–≥—É—Ä—Ç', '—Å–º–µ—Å—å –∑–ª–∞–∫–æ–≤', '–º—é—Å–ª–∏'],
    '–ü–∞—Å—Ç–∞': ['—Å–ø–∞–≥–µ—Ç—Ç–∏', '–ª–∞–∑–∞–Ω—å—è', '—Å–ø–∏—Ä–∞–ª—å–∫–∏', '—Ñ–∞—Ä—Ñ–∞–ª–µ', '–∫–∞—Ä–±–æ–Ω–∞—Ä–∞', '—Ñ–∏—Ç—É—á–∏–Ω–∏', '–Ω—å–æ–∫–∏', '–ø—Ç–∏–º –ø—Ç–∏–º', '–æ—Ä–∑–æ', '—Ä–∏–∑–æ—Ç—Ç–æ', '—Ç–µ–ª—å—è—Ç–µ–ª–∏']
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
BUTTONS_PER_PAGE = 5

def load_recipes():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ JSON"""
    try:
        with open(RECIPE_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        return []

def get_categories():
    categories = set(recipe.get('category') for recipe in recipes)
    return sorted(categories)

def format_recipe(recipe):
    recipe_text = f"üçΩ **{recipe['title']}**\n\n"
    recipe_text += "üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
    for ingredient in recipe.get('ingredients', []):
        amount = ingredient.get('amount', '')
        recipe_text += f"üî∏ {ingredient['ingredient']:20} {amount}\n"
    recipe_text += "\nüßë‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n"
    for i, step in enumerate(recipe.get('instructions', []), start=1):
        recipe_text += f"{i}. {step}\n"
    return recipe_text

def categorize_recipe(recipe_title):
    """–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    for category, keywords in CATEGORIES.items():
        pattern = r'\b(?:' + '|'.join(re.escape(kw) for kw in keywords) + r')\b'
        if re.search(pattern, recipe_title, re.IGNORECASE):
            return category
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def start(update: Update, context: CallbackContext):
    global recipes
    recipes = load_recipes()
    if not recipes:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    categories = get_categories()
    keyboard = [[InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(category, 'üç¥')} {category}", callback_data=f'category_{category}_0')] for category in categories]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)

async def category_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_')
    category = data[1]
    page = int(data[2])

    recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

    if not recipes_in_category:
        await query.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    start_index = page * BUTTONS_PER_PAGE
    end_index = start_index + BUTTONS_PER_PAGE
    recipes_page = recipes_in_category[start_index:end_index]

    keyboard = [[InlineKeyboardButton(f"üçΩ {recipe['title']}", callback_data=f'recipe_{category}_{i + start_index}')] for i, recipe in enumerate(recipes_page)]
    
    if end_index < len(recipes_in_category):
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'category_{category}_{page + 1}')])

    if page > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'category_{category}_{page - 1}')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=reply_markup)

async def recipe_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    try:
        data = query.data.split('_')
        
        if len(data) != 3:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
            return

        category = data[1]
        recipe_index = int(data[2])
        recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

        if 0 <= recipe_index < len(recipes_in_category):
            recipe = recipes_in_category[recipe_index]
            recipe_text = format_recipe(recipe)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage_stats[recipe['title']] = usage_stats.get(recipe['title'], 0) + 1

            await query.message.delete()
            await query.message.reply_text(recipe_text, parse_mode='Markdown')

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            keyboard = []
            category_buttons = [
                InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(cat, 'üç¥')} {cat}", callback_data=f'category_{cat}_0') 
                for cat in get_categories()
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É
            for i in range(0, len(category_buttons), 2):
                keyboard.append(category_buttons[i:i + 2])

            keyboard.append([InlineKeyboardButton("‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f'add_favorite_{recipe["title"]}')])
            keyboard.append([InlineKeyboardButton("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')])
            keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        else:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def add_to_favorites(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    recipe_title = query.data.split('_', 2)[2]
    if recipe_title not in favorites:
       –í–æ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–¥ Telegram-–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ `recipes.json`:

```python
import logging
import json
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
RECIPE_FILE = 'recipes.json'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
recipes = []
favorites = []
usage_stats = {}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–°–∞–ª–∞—Ç—ã": "ü•ó",
    "–°—É–ø—ã": "üç≤",
    "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–¢–µ—Å—Ç–æ": "ü•û",
    "–•–ª–µ–±": "üçû",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": "üçΩ",
    "–ó–∞–∫—É—Å–∫–∏": "ü•™",
    "–ù–∞–ø–∏—Ç–∫–∏": "ü•§",
    "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ": "ü•¶",
    "–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ": "ü•ó",
    "–ó–∞–≤—Ç—Ä–∞–∫–∏": "üç≥",
    "–ü–∞—Å—Ç–∞": "üçù"
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    '–°–∞–ª–∞—Ç—ã': ['—Å–∞–ª–∞—Ç', '–∑–µ–ª—ë–Ω—ã–π', '–æ–≤–æ—â–Ω–æ–π', '–∫–∞–ø—É—Å—Ç–Ω—ã–π', '–≤–∏–Ω–µ–≥—Ä–µ—Ç', '–≥—Ä–µ—á–µ—Å–∫–∏–π', '—Ü–µ–∑–∞—Ä—å'],
    '–°—É–ø—ã': ['—Å—É–ø', '–±—É–ª—å–æ–Ω', '—â–∞–≤–µ–ª—å', '–∫—Ä–µ–º-—Å—É–ø', '—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫', '–æ–∫—Ä–æ—à–∫–∞', '–ø—é—Ä–µ', '–ø–µ–ª—å–º–µ–Ω–∏'],
    '–î–µ—Å–µ—Ä—Ç—ã': ['—Ç–æ—Ä—Ç', '–ø–∏—Ä–æ–≥', '–ø–µ—á–µ–Ω—å–µ', '–ø—É–¥–∏–Ω–≥', '–¥–µ—Å–µ—Ä—Ç', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '—Ç–≤–æ—Ä–æ–∂–Ω–æ–µ'],
    '–¢–µ—Å—Ç–æ': ['—Ç–µ—Å—Ç–æ', '–ø–∏—Ä–æ–≥', '–±–ª–∏–Ω—ã', '–±–ª–∏–Ω—á–∏–∫–∏', '–∫–µ–∫—Å', '–º–∞—Ñ—Ñ–∏–Ω', '–≤—ã–ø–µ—á–∫–∞', '–ø–∏—Ü—Ü–∞'],
    '–•–ª–µ–±': ['—Ö–ª–µ–±', '–±—É–ª–æ—á–∫–∞', '–∫—Ä—É–∞—Å—Å–∞–Ω', '–±–∞–≥–µ—Ç', '–ª–µ–±–µ–¥—É—à–∫–∞', '–ø–∏—Ç–∞', '—Ñ–æ–∫–∞—á—á–∞'],
    '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞': ['–º—è—Å–æ', '—Ä—ã–±–∞', '–ø–∞—Å—Ç–∞', '–≥—Ä–∏–ª—å', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '–∂–∞—Ä–∫–æ–µ'],
    '–ó–∞–∫—É—Å–∫–∏': ['–∑–∞–∫—É—Å–∫–∞', '–∫–∞–Ω–∞–ø–µ', '–∫—Ä–æ—Å—Ç–∏–Ω–∏', '—Ñ–∏–Ω–≥–µ—Ä-—Ñ—É–¥', '—Ä–∞–≥—É', '–∫–µ–±–∞–±'],
    '–ù–∞–ø–∏—Ç–∫–∏': ['–Ω–∞–ø–∏—Ç–æ–∫', '—Å–º—É–∑–∏', '–∫–æ–∫—Ç–µ–π–ª—å', '—á–∞–π', '–∫–æ—Ñ–µ', '—Å–æ–∫', '–º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å'],
    '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ': ['–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π', '–≤–µ–≥–∞–Ω—Å–∫–∏–π', '–æ–≤–æ—â–∏', '—Ç–æ—Ñ—É', '—Å–µ–π—Ç–∞–Ω'],
    '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ': ['–¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π', '–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π', '–æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π', '—Å–∞–ª–∞—Ç', '–æ–≤–æ—â–Ω–æ–π —Å—É–ø'],
    '–ó–∞–≤—Ç—Ä–∞–∫–∏': ['–∑–∞–≤—Ç—Ä–∞–∫', '—Å—ã—Ä–Ω–∏–∫–∏', '–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—è–∏—á–Ω–∏—Ü–∞', '–±–ª–∏–Ω—ã', '–æ–ª–∞–¥—å–∏', '–≥—Ä–µ–Ω–∫–∏', '–ø—É–¥–∏–Ω–≥', '–π–æ–≥—É—Ä—Ç', '—Å–º–µ—Å—å –∑–ª–∞–∫–æ–≤', '–º—é—Å–ª–∏'],
    '–ü–∞—Å—Ç–∞': ['—Å–ø–∞–≥–µ—Ç—Ç–∏', '–ª–∞–∑–∞–Ω—å—è', '—Å–ø–∏—Ä–∞–ª—å–∫–∏', '—Ñ–∞—Ä—Ñ–∞–ª–µ', '–∫–∞—Ä–±–æ–Ω–∞—Ä–∞', '—Ñ–∏—Ç—É—á–∏–Ω–∏', '–Ω—å–æ–∫–∏', '–ø—Ç–∏–º –ø—Ç–∏–º', '–æ—Ä–∑–æ', '—Ä–∏–∑–æ—Ç—Ç–æ', '—Ç–µ–ª—å—è—Ç–µ–ª–∏']
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
BUTTONS_PER_PAGE = 5

def load_recipes():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ JSON"""
    try:
        with open(RECIPE_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
        return []

def get_categories():
    categories = set(recipe.get('category') for recipe in recipes)
    return sorted(categories)

def format_recipe(recipe):
    recipe_text = f"üçΩ **{recipe['title']}**\n\n"
    recipe_text += "üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
    for ingredient in recipe.get('ingredients', []):
        amount = ingredient.get('amount', '')
        recipe_text += f"üî∏ {ingredient['ingredient']:20} {amount}\n"
    recipe_text += "\nüßë‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n"
    for i, step in enumerate(recipe.get('instructions', []), start=1):
        recipe_text += f"{i}. {step}\n"
    return recipe_text

def categorize_recipe(recipe_title):
    """–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    for category, keywords in CATEGORIES.items():
        pattern = r'\b(?:' + '|'.join(re.escape(kw) for kw in keywords) + r')\b'
        if re.search(pattern, recipe_title, re.IGNORECASE):
            return category
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def start(update: Update, context: CallbackContext):
    global recipes
    recipes = load_recipes()
    if not recipes:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    categories = get_categories()
    keyboard = [[InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(category, 'üç¥')} {category}", callback_data=f'category_{category}_0')] for category in categories]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)

async def category_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_')
    category = data[1]
    page = int(data[2])

    recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

    if not recipes_in_category:
        await query.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    start_index = page * BUTTONS_PER_PAGE
    end_index = start_index + BUTTONS_PER_PAGE
    recipes_page = recipes_in_category[start_index:end_index]

    keyboard = [[InlineKeyboardButton(f"üçΩ {recipe['title']}", callback_data=f'recipe_{category}_{i + start_index}')] for i, recipe in enumerate(recipes_page)]
    
    if end_index < len(recipes_in_category):
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'category_{category}_{page + 1}')])

    if page > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f'category_{category}_{page - 1}')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=reply_markup)

async def recipe_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    try:
        data = query.data.split('_')
        
        if len(data) != 3:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
            return

        category = data[1]
        recipe_index = int(data[2])
        recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

        if 0 <= recipe_index < len(recipes_in_category):
            recipe = recipes_in_category[recipe_index]
            recipe_text = format_recipe(recipe)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage_stats[recipe['title']] = usage_stats.get(recipe['title'], 0) + 1

            await query.message.delete()
            await query.message.reply_text(recipe_text, parse_mode='Markdown')

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            keyboard = []
            category_buttons = [
                InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(cat, 'üç¥')} {cat}", callback_data=f'category_{cat}_0') 
                for cat in get_categories()
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É
            for i in range(0, len(category_buttons), 2):
                keyboard.append(category_buttons[i:i + 2])

            keyboard.append([InlineKeyboardButton("‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f'add_favorite_{recipe["title"]}')])
            keyboard.append([InlineKeyboardButton("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')])
            keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        else:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def add_to_favorites(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    recipe_title = query.data.split('_', 2)[2]
    if recipe_title not in favorites:
        favorites.append(recipe_titleHere's the complete code for your Telegram bot, continuing from where we left off:

```python
        favorites.append(recipe_title)
        await query.message.reply_text(f"–†–µ—Ü–µ–ø—Ç '{recipe_title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    else:
        await query.message.reply_text(f"–†–µ—Ü–µ–ø—Ç '{recipe_title}' —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")

async def show_favorites(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if not favorites:
        await query.message.reply_text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ–µ.")
        return

    favorites_text = "\n".join(f"üî∏ {title}" for title in favorites)
    await query.message.reply_text(f"–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n{favorites_text}")

async def show_stats(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if not usage_stats:
        await query.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        return

    stats_text = "\n".join(f"üìä {title}: {count} —Ä–∞–∑(–∞)" for title, count in usage_stats.items())
    await query.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n{stats_text}")

if __name__ == "__main__":
    app = ApplicationBuilder().token("6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(category_button, pattern='category_.*'))
    app.add_handler(CallbackQueryHandler(recipe_button, pattern='recipe_.*'))
    app.add_handler(CallbackQueryHandler(add_to_favorites, pattern='add_favorite_.*'))
    app.add_handler(CallbackQueryHandler(show_favorites, pattern='favorites'))
    app.add_handler(CallbackQueryHandler(show_stats, pattern='stats'))

    app.run_polling()
