import logging
import json
import asyncio
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
async def load_recipes():
    recipes = []
    urls = [
        "https://raw.githubusercontent.com/Ioneovv/CheffBot/main/recipes_part1.json",
        "https://raw.githubusercontent.com/Ioneovv/CheffBot/main/recipes_part2.json"
    ]

    async with aiohttp.ClientSession() as session:
        for url in urls:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    recipes.extend(data)
                    print(f"–§–∞–π–ª {url} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {response.status}")
    return recipes

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
recipes = asyncio.run(load_recipes())

# –≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–°–∞–ª–∞—Ç—ã": "ü•ó", "–°—É–ø—ã": "üç≤", "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": "üçΩ", "–ó–∞–∫—É—Å–∫–∏": "ü•™", "–ù–∞–ø–∏—Ç–∫–∏": "ü•§"
}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∏—Å—Ç–æ—Ä–∏—è
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_data[user_id] = {'favorites': [], 'history': []}

    categories = set(recipe.get('category') for recipe in recipes)
    keyboard = [[InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(cat, 'üç¥')} {cat}", callback_data=f'category_{cat}_0')] for cat in sorted(categories)]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async def show_favorites(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    favorites = user_data.get(user_id, {}).get('favorites', [])

    if favorites:
        message = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n" + "\n".join(f"üçΩ {r['title']}" for r in favorites)
    else:
        message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."

    await update.message.reply_text(message)

# –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
async def search_recipes(update: Update, context: CallbackContext):
    query = ' '.join(context.args)
    matched_recipes = [r for r in recipes if any(query.lower() in i.lower() for i in r.get('ingredients', []))]

    if matched_recipes:
        result = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n" + "\n".join(f"üçΩ {r['title']}" for r in matched_recipes)
    else:
        result = "–†–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await update.message.reply_text(result)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
async def add_to_favorites(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    query = update.callback_query
    recipe_index = int(query.data.split('_')[2])

    recipe = recipes[recipe_index]
    if recipe not in user_data[user_id]['favorites']:
        user_data[user_id]['favorites'].append(recipe)
        await query.answer("–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    else:
        await query.answer("–†–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")

# –†–µ–π—Ç–∏–Ω–≥ —Ä–µ—Ü–µ–ø—Ç–æ–≤
async def rate_recipe(update: Update, context: CallbackContext):
    query = update.callback_query
    recipe_index = int(query.data.split('_')[2])
    rating = int(query.data.split('_')[3])

    recipes[recipe_index]['rating'] = rating
    await query.answer(f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç –Ω–∞ {rating} –∑–≤—ë–∑–¥!")

# –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
async def show_history(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    history = user_data.get(user_id, {}).get('history', [])

    if history:
        message = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:\n\n" + "\n".join(f"üçΩ {r['title']}" for r in history)
    else:
        message = "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—É—Å—Ç–∞."

    await update.message.reply_text(message)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ä–µ—Ü–µ–ø—Ç—ã)
async def category_button(update: Update, context: CallbackContext):
    query = update.callback_query
    category = query.data.split('_')[1]

    recipes_in_category = [recipe for recipe in recipes if recipe.get('category') == category]
    if recipes_in_category:
        keyboard = [[InlineKeyboardButton(f"üçΩ {recipe['title']}", callback_data=f'recipe_{i}')] for i, recipe in enumerate(recipes_in_category)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
async def show_recipe(update: Update, context: CallbackContext):
    query = update.callback_query
    recipe_index = int(query.data.split('_')[1])

    recipe = recipes[recipe_index]
    recipe_text = f"üçΩ **{recipe['title']}**\n\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join(f"- {i}" for i in recipe.get('ingredients', [])) + "\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n" + "\n".join(f"{i+1}. {s}" for i, s in enumerate(recipe.get('instructions', [])))

    user_id = update.effective_user.id
    user_data[user_id]['history'].append(recipe)

    await query.message.reply_text(recipe_text)

# –ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='show_favorites')],
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data='show_history')],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º", callback_data='search')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ú–µ–Ω—é", reply_markup=reply_markup)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = ApplicationBuilder().token("6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("search", search_recipes))
    application.add_handler(CommandHandler("favorites", show_favorites))
    application.add_handler(CommandHandler("history", show_history))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CallbackQueryHandler(category_button, pattern='^category_'))
    application.add_handler(CallbackQueryHandler(show_recipe, pattern='^recipe_'))
    application.add_handler(CallbackQueryHandler(add_to_favorites, pattern='^favorite_'))
    application.add_handler(CallbackQueryHandler(rate_recipe, pattern='^rate_'))

    await application.start()
    await application.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == '__main__':
    asyncio.run(main())
