import requests
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler

# URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
RECIPE_URL = 'https://drive.google.com/file/d/1xHKBF9dBVJBqeO-tT6CxCgAx34TG46em/view?usp=drive_link'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
recipes = []

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–°–∞–ª–∞—Ç—ã": "ü•ó",
    "–°—É–ø—ã": "üç≤",
    "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–¢–µ—Å—Ç–æ": "ü•û",
    "–•–ª–µ–±": "üçû",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": "üçΩ",
    "–ó–∞–∫—É—Å–∫–∏": "ü•™",
    "–ù–∞–ø–∏—Ç–∫–∏": "ü•§",
    "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ": "ü•¶",
    "–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ": "ü•ó",
    "–ó–∞–≤—Ç—Ä–∞–∫–∏": "üåÖ",  # –≠–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–æ–≤
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    '–°–∞–ª–∞—Ç—ã': ['—Å–∞–ª–∞—Ç', '–∑–µ–ª—ë–Ω—ã–π', '–æ–≤–æ—â–Ω–æ–π', '–∫–∞–ø—É—Å—Ç–Ω—ã–π', '–≤–∏–Ω–µ–≥—Ä–µ—Ç', '–≥—Ä–µ—á–µ—Å–∫–∏–π', '—Ü–µ–∑–∞—Ä—å'],
    '–°—É–ø—ã': ['—Å—É–ø', '–±—É–ª—å–æ–Ω', '—â–∞–≤–µ–ª—å', '–∫—Ä–µ–º-—Å—É–ø', '—Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫', '–æ–∫—Ä–æ—à–∫–∞', '–ø—é—Ä–µ', '–ø–µ–ª—å–º–µ–Ω–∏'],
    '–î–µ—Å–µ—Ä—Ç—ã': ['—Ç–æ—Ä—Ç', '–ø–∏—Ä–æ–≥', '–ø–µ—á–µ–Ω—å–µ', '–ø—É–¥–∏–Ω–≥', '–¥–µ—Å–µ—Ä—Ç', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '—Ç–≤–æ—Ä–æ–∂–Ω–æ–µ'],
    '–¢–µ—Å—Ç–æ': ['—Ç–µ—Å—Ç–æ', '–ø–∏—Ä–æ–≥', '–±–ª–∏–Ω—ã', '–±–ª–∏–Ω—á–∏–∫–∏', '–∫–µ–∫—Å', '–º–∞—Ñ—Ñ–∏–Ω', '–≤—ã–ø–µ—á–∫–∞', '–ø–∏—Ü—Ü–∞'],
    '–•–ª–µ–±': ['—Ö–ª–µ–±', '–±—É–ª–æ—á–∫–∞', '–∫—Ä—É–∞—Å—Å–∞–Ω', '–±–∞–≥–µ—Ç', '–ª–µ–±–µ–¥—É—à–∫–∞', '–ø–∏—Ç–∞', '—Ñ–æ–∫–∞—á—á–∞'],
    '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞': ['–º—è—Å–æ', '—Ä—ã–±–∞', '–ø–∞—Å—Ç–∞', '–≥—Ä–∏–ª—å', '–∑–∞–ø–µ–∫–∞–Ω–∫–∞', '–∂–∞—Ä–∫–æ–µ'],
    '–ó–∞–∫—É—Å–∫–∏': ['–∑–∞–∫—É—Å–∫–∞', '–∫–∞–Ω–∞–ø–µ', '–∫—Ä–æ—Å—Ç–∏–Ω–∏', '—Ñ–∏–Ω–≥–µ—Ä-—Ñ—É–¥', '—Ä–∞–≥—É', '–∫–µ–±–∞–±'],
    '–ù–∞–ø–∏—Ç–∫–∏': ['–Ω–∞–ø–∏—Ç–æ–∫', '—Å–º—É–∑–∏', '–∫–æ–∫—Ç–µ–π–ª—å', '—á–∞–π', '–∫–æ—Ñ–µ', '—Å–æ–∫', '–º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å'],
    '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ': ['–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π', '–≤–µ–≥–∞–Ω—Å–∫–∏–π', '–æ–≤–æ—â–∏', '—Ç–æ—Ñ—É', '—Å–µ–π—Ç–∞–Ω'],
    '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ': ['–¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π', '–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π', '–æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω—ã–π', '—Å–∞–ª–∞—Ç', '–æ–≤–æ—â–Ω–æ–π —Å—É–ø'],
    '–ó–∞–≤—Ç—Ä–∞–∫–∏': ['–∑–∞–≤—Ç—Ä–∞–∫', '—Å—ã—Ä–Ω–∏–∫–∏', '–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '—è–∏—á–Ω–∏—Ü–∞', '–±–ª–∏–Ω—ã', '–æ–ª–∞–¥—å–∏', '–≥—Ä–µ–Ω–∫–∏', '–ø—É–¥–∏–Ω–≥', '–π–æ–≥—É—Ä—Ç', '—Å–º–µ—Å—å –∑–ª–∞–∫–æ–≤', '–º—é—Å–ª–∏']
}

def load_recipes():
    try:
        response = requests.get(RECIPE_URL)
        response.raise_for_status()
        return response.json()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    except requests.RequestException as e:
        print(f"Failed to load recipes: {e}")
        return []

def get_categories():
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    categories = set(recipe.get('category') for recipe in recipes)
    return sorted(categories)

def format_recipe(recipe):
    recipe_text = f"üçΩ **{recipe['title']}**\n\n"
    recipe_text += "üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
    for ingredient in recipe.get('ingredients', []):
        amount = ingredient.get('amount', '')
        recipe_text += f"üî∏ {ingredient['ingredient']:20} {amount}\n"
    recipe_text += "\nüßë‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n"
    for i, step in enumerate(recipe.get('instructions', []), start=1):
        recipe_text += f"{i}. {step}\n"
    return recipe_text

def categorize_recipe(recipe_title):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    for category, keywords in CATEGORIES.items():
        if any(keyword.lower() in recipe_title.lower() for keyword in keywords):
            return category
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def start(update: Update, context: CallbackContext):
    global recipes
    recipes = load_recipes()
    categories = get_categories()
    keyboard = [[InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(category, 'üç¥')} {category}", callback_data=f'category_{category}')] for category in categories]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)

async def category_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    category = query.data.split('_')[1]

    recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

    if not recipes_in_category:
        await query.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    keyboard = [[InlineKeyboardButton(f"üçΩ {recipe['title']}", callback_data=f'recipe_{category}_{i}')] for i, recipe in enumerate(recipes_in_category)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=reply_markup)

async def recipe_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    try:
        data = query.data.split('_')
        category = data[1]
        recipe_index = int(data[2])
        recipes_in_category = [recipe for recipe in recipes if categorize_recipe(recipe['title']) == category]

        if 0 <= recipe_index < len(recipes_in_category):
            recipe = recipes_in_category[recipe_index]
            recipe_text = format_recipe(recipe)

            await query.message.delete()
            await query.message.reply_text(recipe_text, parse_mode='Markdown')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            keyboard = [[InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(cat, 'üç¥')} {cat}", callback_data=f'category_{cat}')] for cat in get_categories()]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:", reply_markup=reply_markup)
        else:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"Error in recipe_button handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    application = ApplicationBuilder().token("6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(category_button, pattern='^category_'))
    application.add_handler(CallbackQueryHandler(recipe_button, pattern='^recipe_'))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == '__main__':
    asyncio.run(main())
